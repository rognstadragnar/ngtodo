{"version":3,"sources":["../../src/hmr/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path';\nimport cluster from 'cluster';\nimport _ from 'lodash';\nimport socketIo from 'socket.io';\nimport defaults from '../options/defaults';\nimport log from '../log';\n\nconst logger = log('hmr');\nconst namespaces = Object.create(null);\n\nlet io = null;\n\nexport const addToServer = (server) => {\n  io = socketIo(server, {path: defaults.hmrPath});\n};\n\nconst getNamespace = (opts) => {\n  return namespaces[opts.hmrNamespace];\n};\n\nexport const register = (opts) => {\n  if (cluster.isWorker) {\n    return process.send({\n      type: 'hmr-register',\n      data: {opts}\n    });\n  }\n\n  let namespace = opts.hmrNamespace;\n\n  if (!namespaces[namespace]) {\n    let nsp = io.of(namespace);\n\n    namespaces[namespace] = nsp;\n\n    nsp.on('connection', (socket) => {\n      logger(`namespace ${namespace} opened connection ${socket.id}`);\n\n      socket.emit('hot');\n    });\n\n    logger(`registered hmr namespace: ${namespace}`);\n  }\n};\n\nexport const emitDone = (opts, stats) => {\n  if (_.isFunction(stats.toJson)) {\n    stats = stats.toJson();\n  }\n\n  if (cluster.isWorker) {\n    return process.send({\n      type: 'hmr-done',\n      data: {\n        opts,\n        stats\n      }\n    });\n  }\n\n  logger(`emitting done signal to ${opts.hmrNamespace}`);\n\n  let nsp = getNamespace(opts);\n\n  if (\n    stats &&\n    stats.assets &&\n    stats.assets.every((asset) => {\n      return !asset.emitted;\n    })\n  ) {\n    return nsp.emit('no-change');\n  }\n\n  nsp.emit('hash', stats.hash);\n\n  if (stats.errors.length > 0) {\n    nsp.emit('errors', stats.errors);\n  } else if (stats.warnings.length > 0) {\n    nsp.emit('warnings', stats.warnings);\n  } else {\n    nsp.emit('success');\n  }\n};\n\nexport const emitInvalid = (opts) => {\n  if (cluster.isWorker) {\n    return process.send({\n      type: 'hmr-invalid',\n      data: {opts}\n    });\n  }\n\n  logger(`emitting invalid signal to ${opts.hmrNamespace}`);\n\n  let nsp = getNamespace(opts);\n  nsp.emit('invalid');\n};\n\nexport default {\n  addToServer,\n  register,\n  emitInvalid,\n  emitDone\n}"]}