{"version":3,"sources":["../../src/caches/index.js"],"names":[],"mappings":";;;;;;;;uBAAoB,SAAS;;;;mBACb,QAAQ;;;;sBACL,UAAU;;;;qBAEd;AACb,KAAG,EAAE,aAAC,IAAI,EAAE,EAAE,EAAK;;AAEjB,QAAI,qBAAQ,QAAQ,EAAE;AACpB,YAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;KAC5D;;AAED,QAAI,MAAM,GAAG,sBAAI,eAAe,EAAE,IAAI,CAAC,CAAC;;AAExC,QAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AACf,YAAM,CAAC,mBAAmB,CAAC,CAAC;AAC5B,aAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACvB;;AAED,UAAM,CAAC,gBAAgB,CAAC,CAAC;AACzB,QAAI,KAAK,GAAG,oBAAO,GAAG,CAAC,IAAI,CAAC,CAAC;;AAE7B,QAAI,KAAK,CAAC,QAAQ,EAAE;AAClB,YAAM,CAAC,qBAAqB,CAAC,CAAC;AAC9B,aAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACvB;;AAED,UAAM,CAAC,4BAA4B,CAAC,CAAC;AACrC,SAAK,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,IAAI,EAAK;AACvB,UAAI,GAAG,EAAE;AACP,cAAM,CAAC,8CAA8C,CAAC,CAAC;AACvD,eAAO,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;OACtB;;AAED,UAAI,CAAC,IAAI,EAAE;AACT,cAAM,CAAC,8BAA8B,CAAC,CAAC;AACvC,eAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;OACvB;;AAED,UAAI,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,EAAE;AACrC,cAAM,yBAAuB,IAAI,CAAC,SAAS,0BAAqB,IAAI,CAAC,SAAS,OAAI,CAAC;AACnF,aAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAChB,eAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;OACvB;;AAED,YAAM,CAAC,uBAAuB,CAAC,CAAC;AAChC,QAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KAChB,CAAC,CAAC;GACJ;AACD,KAAG,EAAE,aAAC,IAAI,EAAE,IAAI,EAAK;AACnB,QAAI,MAAM,GAAG,sBAAI,eAAe,EAAE,IAAI,CAAC,CAAC;;AAExC,QAAI,qBAAQ,QAAQ,EAAE;AACpB,YAAM,CAAC,wCAAwC,CAAC,CAAC;AACjD,aAAO,OAAO,CAAC,IAAI,CAAC;AAClB,YAAI,EAAE,OAAO;AACb,YAAI,EAAE;AACJ,cAAI,EAAJ,IAAI;AACJ,mBAAS,EAAE,IAAI;SAChB;OACF,CAAC,CAAC;KACJ;;AAED,QAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AACf,YAAM,CAAC,0DAA0D,CAAC,CAAC;AACnE,aAAO;KACR;;AAED,QAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;;AAE1B,UAAM,CAAC,gBAAgB,CAAC,CAAC;AACzB,QAAI,KAAK,GAAG,oBAAO,GAAG,CAAC,IAAI,CAAC,CAAC;;AAE7B,QAAI,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;AAC/B,YAAM,CAAC,yCAAyC,CAAC,CAAC;KACnD;;AAED,UAAM,CAAC,gBAAgB,CAAC,CAAC;AACzB,SAAK,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;GAC3B;AACD,OAAK,EAAE,iBAAM;;AAEX,wBAAO,KAAK,EAAE,CAAC;GAChB;AACD,SAAO,qBAAQ;CAChB","file":"index.js","sourcesContent":["import cluster from 'cluster';\nimport log from '../log';\nimport caches from './caches';\n\nexport default {\n  get: (opts, cb) => {\n    // Sanity check\n    if (cluster.isWorker) {\n      throw new Error('Workers should not fetch from the cache');\n    }\n\n    let logger = log('cache-manager', opts);\n\n    if (!opts.cache) {\n      logger('cache deactivated');\n      return cb(null, null);\n    }\n\n    logger('fetching cache');\n    let cache = caches.get(opts);\n\n    if (cache.delegate) {\n      logger('cache has delegated');\n      return cb(null, null);\n    }\n\n    logger('requesting data from cache');\n    cache.get((err, data) => {\n      if (err) {\n        logger('cache encountered an error, passing error up');\n        return cb(err, null);\n      }\n\n      if (!data) {\n        logger('cache failed to provide data');\n        return cb(null, null);\n      }\n\n      if (data.buildHash !== opts.buildHash) {\n        logger(`cached build hash \"${data.buildHash}\" does not match \"${opts.buildHash}\"`);\n        cache.set(null);\n        return cb(null, null);\n      }\n\n      logger('providing cached data');\n      cb(null, data);\n    });\n  },\n  set: (opts, data) => {\n    let logger = log('cache-manager', opts);\n\n    if (cluster.isWorker) {\n      logger('sending cache signal to master process');\n      return process.send({\n        type: 'cache',\n        data: {\n          opts,\n          cacheData: data\n        }\n      });\n    }\n\n    if (!opts.cache) {\n      logger('caching has been deactivated, data will not be persisted');\n      return;\n    }\n\n    let delegate = opts.watch;\n\n    logger('fetching cache');\n    let cache = caches.get(opts);\n\n    if (delegate && !cache.delegate) {\n      logger('cache will now delegate future requests');\n    }\n\n    logger('updating cache');\n    cache.set(data, delegate);\n  },\n  clear: () => {\n    // Purges the memory cache, but leaves the file system intact\n    caches.clear();\n  },\n  _caches: caches\n};\n"]}