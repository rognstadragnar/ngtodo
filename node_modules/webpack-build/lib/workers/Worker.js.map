{"version":3,"sources":["../../src/workers/Worker.js"],"names":[],"mappings":"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","file":"Worker.js","sourcesContent":["import os from 'os';\nimport path from 'path';\nimport cluster from 'cluster';\nimport _ from 'lodash';\nimport hmr from '../hmr';\nimport caches from '../caches';\nimport options from '../options';\nimport log from '../log';\n\nif (!cluster.isWorker) {\n  cluster.setupMaster({\n    exec: path.join(__dirname, 'entry.js'),\n    // Prevent the workers from running their own debugger\n    args: _.without(process.argv.slice(2), '--debug-brk', 'debug'),\n    execArgv: _.without(process.execArgv, '--debug-brk', 'debug')\n  });\n}\n\nclass Worker {\n  constructor() {\n    this.err = null;\n    this.isReady = false;\n    this._onReady = [];\n    this._onStatus = [];\n    this._onBuild = Object.create(null);\n    this._handled = Object.create(null);\n\n    // Sanity check\n    if (cluster.isWorker) {\n      throw new Error('workers should not create their own workers');\n    }\n\n    this.worker = cluster.fork();\n    this.id = this.worker.id;\n\n    this.logger = log(`worker-manager-${this.id}`);\n\n    this.worker.on('message', this.handleMessage.bind(this));\n    this.worker.on('error', this.handleError.bind(this));\n    this.worker.on('exit', this.handleExit.bind(this));\n\n    this.worker.process.on('exit', this.kill.bind(this));\n    this.worker.process.on('uncaughtException', this.kill.bind(this));\n\n    this.logger(`started worker ${this.id}`);\n  }\n  build(opts, cb) {\n    opts = options(opts);\n\n    // Sanity checks\n    if (!cb) throw new Error('No callback provided to build');\n    if (!opts.buildHash) throw new Error('No buildHash defined');\n\n    let buildHash = opts.buildHash;\n\n    let buildRequests = this._onBuild[buildHash];\n    if (!buildRequests) {\n      buildRequests = this._onBuild[buildHash] = [];\n    }\n\n    buildRequests.push(cb);\n\n    if (buildRequests.length === 1) {\n      this.onReady(err => {\n        if (err) {\n          return this._callBuildRequests(buildHash, err, null);\n        }\n\n        // Keep track of the config files which have been imported for particular builds\n        this._handled[opts.config] = buildHash;\n\n        this.logger(`sending build request for ${buildHash} to worker ${this.id}`);\n        this.worker.send({\n          type: 'build',\n          data: opts\n        });\n      });\n    } else {\n      this.logger(`enqueuing build request for ${buildHash}, awaiting worker ${this.id}`);\n    }\n  }\n  getStatus(cb) {\n    this.onReady(err => {\n      if (err) return cb(err, null);\n\n      this._onStatus.push(cb);\n\n      this.logger(`sending status request to worker ${this.id}`);\n      this.worker.send({\n        type: 'status'\n      });\n    });\n  }\n  onReady(cb) {\n    this._onReady.push(cb);\n\n    if (this.isReady || this.err) {\n      this._callReady(this.err);\n    }\n  }\n  handleMessage(msg) {\n    if (!_.isObject(msg)) {\n      throw new Error(`Malformed worker message: \"${msg}\"`);\n    }\n\n    if (!msg.type) {\n      throw new Error(`Worker message lacks a type prop: ${JSON.stringify(msg)}`);\n    }\n\n    let {type, data} = msg;\n\n    let cases = {\n      ready: data => {\n        this.logger(`worker ${this.id} ready`);\n        this.isReady = true;\n        this._callReady(null);\n      },\n      status: data => {\n        this.logger(`worker ${this.id} responded to status request`);\n        this._callStatusRequests(null, data);\n      },\n      build: data => {\n        let {buildHash, buildData} = data;\n        this.logger(`worker ${this.id} responded to build request ${buildHash}`);\n        this._callBuildRequests(buildHash, buildData.error, buildData.data);\n      },\n      cache: data => {\n        let {opts, cacheData} = data;\n        this.logger(`worker ${this.id} sent a cache signal for build ${opts.buildHash}`);\n        caches.set(opts, cacheData);\n      },\n      'hmr-register': data => {\n        let {opts} = data;\n        this.logger(`worker ${this.id} sent a hmr-register signal for build ${opts.buildHash}`);\n        hmr.register(opts);\n      },\n      'hmr-done': data => {\n        let {opts, stats} = data;\n        this.logger(`worker ${this.id} sent a hmr-done signal for build ${opts.buildHash}`);\n        hmr.emitDone(opts, stats);\n      },\n      'hmr-invalid': data => {\n        let {opts} = data;\n        this.logger(`worker ${this.id} sent a hmr-invalid signal for build ${opts.buildHash}`);\n        hmr.emitInvalid(opts);\n      }\n    };\n\n    if (type in cases) {\n      cases[type](data);\n    } else {\n      throw new Error(`Unknown message type \"${type}\" from worker ${this.worker.id}: ${JSON.stringify(msg)}`);\n    }\n  }\n  handleError(err) {\n    this.logger(`worker process ${this.id} error: ${err}`);\n\n    this.err = err;\n    this.isReady = false;\n\n    this._flushCallbacks(err);\n  }\n  handleExit(code) {\n    this.logger(`worker process ${this.id} exited with code ${code}`);\n    this.isReady = false;\n\n    if (!this.err) {\n      this.err = new Error(`worker process ${this.id} has already exited with code ${code}`)\n    }\n\n    this._flushCallbacks(this.err);\n  }\n  _callReady(err) {\n    let onReady = this._onReady;\n    this._onReady = [];\n    onReady.forEach((cb) => cb(err));\n  }\n  _callStatusRequests(err, data) {\n    let onStatus = this._onStatus;\n    this._onStatus = [];\n    onStatus.forEach((cb) => cb(err, data));\n  }\n  _callBuildRequests(buildHash, err, data) {\n    // Sanity checks\n    if (!buildHash) {\n      throw new Error(`buildHash not defined. Received ${buildHash} with ${err} and ${data}`);\n    }\n    if (!this._onBuild[buildHash]) {\n      throw new Error(`Unknown build hash ${buildHash} in ${JSON.stringify(this._onBuild)}`);\n    }\n\n    let onBuild = this._onBuild[buildHash];\n    this._onBuild[buildHash] = [];\n    onBuild.forEach((cb) => cb(err, data));\n  }\n  _flushCallbacks(err) {\n    this._callReady(err);\n    this._callStatusRequests(err, null);\n    for (let buildHash in this._onBuild) {\n      this._callBuildRequests(buildHash, err, null);\n    }\n  }\n  kill() {\n    if (!this.worker.isDead()) {\n      this.logger(`killing worker process ${this.id}`);\n      this.worker.kill();\n    }\n  }\n}\n\nexport default Worker;"]}