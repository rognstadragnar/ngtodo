{"version":3,"sources":["../../src/workers/index.js"],"names":[],"mappings":";;;;;;;;;;;;uBAAoB,SAAS;;;;sBACf,QAAQ;;;;uBACF,YAAY;;;;sBACb,UAAU;;;;IAEvB,OAAO;AACA,WADP,OAAO,GACG;0BADV,OAAO;;AAET,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACd,QAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACnC,QAAI,CAAC,cAAc,GAAG,CAAC,CAAC;GACzB;;eANG,OAAO;;WAOF,qBAAG;AACV,aAAO,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;KAChC;;;WACI,iBAAG;AACN,aAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;KAC5B;;;WACI,eAAC,MAAM,EAAE;;;;;AAGZ,YAAM,GAAG,MAAM,IAAI,IAAI,CAAC,cAAc,CAAC;;AAEvC,0BAAE,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAM;AAC5B,cAAK,OAAO,CAAC,IAAI,CAAC,yBAAY,CAAC,CAAC;OACjC,CAAC,CAAC;KACJ;;;WACI,eAAC,IAAI,EAAE,EAAE,EAAE;;;AAGd,UAAI,GAAG,0BAAQ,IAAI,CAAC,CAAC;;AAErB,UAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;AACrB,eAAO,EAAE,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC;OAC9C;;AAED,UAAI,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACrC,UAAI,aAAa,EAAE;AACjB,eAAO,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;OACtC;;AAED,UAAI,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACxB,UAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;AACzC,YAAM,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;KACxB;;;WACI,eAAC,IAAI,EAAE;;;;AAIV,UAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;AACzB,UAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAC3B,UAAI,EAAE,EAAE;AACN,eAAO,oBAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAC,EAAE,EAAF,EAAE,EAAC,CAAC,CAAC;OACnC;KACF;;;WACE,eAAG;AACJ,UAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAErC,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;AACpC,YAAI,CAAC,IAAI,GAAG,CAAC,CAAC;OACf;;AAED,aAAO,MAAM,CAAC;KACf;;;WACM,mBAAG;;;;;;AACR,6BAAmB,IAAI,CAAC,OAAO,8HAAE;cAAxB,MAAM;;AACb,gBAAM,CAAC,IAAI,EAAE,CAAC;SACf;;;;;;;;;;;;;;;;AACD,UAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,UAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACd,UAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KACpC;;;SAnEG,OAAO;;;qBAsEE,IAAI,OAAO,EAAE","file":"index.js","sourcesContent":["import cluster from 'cluster';\nimport _ from 'lodash';\nimport options from '../options';\nimport Worker from './Worker';\n\nclass Workers {\n  constructor() {\n    this.workers = [];\n    this.next = 0;\n    this.matches = Object.create(null);\n    this.defaultWorkers = 2;\n  }\n  available() {\n    return this.workers.length > 0;\n  }\n  count() {\n    return this.workers.length;\n  }\n  spawn(number) {\n    // Spawns worker processes. If `number` is not defined, 2 workers are spawned\n\n    number = number || this.defaultWorkers;\n\n    _.range(number).forEach(() => {\n      this.workers.push(new Worker());\n    });\n  }\n  build(opts, cb) {\n    // Passes `opts` to an available worker\n\n    opts = options(opts);\n\n    if (!this.available()) {\n      return cb(new Error('No workers available'));\n    }\n\n    let matchedWorker = this.match(opts);\n    if (matchedWorker) {\n      return matchedWorker.build(opts, cb);\n    }\n\n    let worker = this.get();\n    this.matches[opts.buildHash] = worker.id;\n    worker.build(opts, cb);\n  }\n  match(opts) {\n    // Returns a worker, if any, which has previously built `opts` and is likely\n    // to have a warm compiler or an in-memory cache\n\n    let key = opts.buildHash;\n    let id = this.matches[key];\n    if (id) {\n      return _.find(this.workers, {id});\n    }\n  }\n  get() {\n    let worker = this.workers[this.next];\n\n    this.next++;\n    if (this.next >= this.workers.length) {\n      this.next = 0;\n    }\n\n    return worker;\n  }\n  killAll() {\n    for (let worker of this.workers) {\n      worker.kill();\n    }\n    this.workers = [];\n    this.next = 0;\n    this.matches = Object.create(null);\n  }\n}\n\nexport default new Workers();"]}