{"version":3,"sources":["../src/workers.js"],"names":[],"mappings":"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","file":"workers.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\nimport Worker from '../../lib/workers/Worker';\nimport workers from '../../lib/workers';\nimport utils from './utils';\n\nlet assert = utils.assert;\n\n// Ensure we have a clean slate before and after each test\nbeforeEach(() => {\n  workers.killAll();\n  utils.cleanTestOutputDir();\n});\nafterEach(() => {\n  workers.killAll();\n  utils.cleanTestOutputDir();\n});\n\ndescribe('workers', () => {\n  it('should be able to spawn workers and indicate if any are available', () => {\n    assert.isFalse(workers.available());\n    assert.equal(workers.count(), 0);\n\n    workers.spawn(1);\n\n    assert.isTrue(workers.available());\n    assert.equal(workers.count(), 1);\n    assert.instanceOf(workers.workers[0], Worker);\n\n    workers.spawn(2);\n\n    assert.isTrue(workers.available());\n    assert.equal(workers.count(), 3);\n    assert.instanceOf(workers.workers[0], Worker);\n    assert.instanceOf(workers.workers[1], Worker);\n    assert.instanceOf(workers.workers[2], Worker);\n\n    workers.killAll();\n\n    assert.isFalse(workers.available());\n    assert.equal(workers.count(), 0);\n    assert.isUndefined(workers.workers[0]);\n    assert.isUndefined(workers.workers[1]);\n    assert.isUndefined(workers.workers[2]);\n  });\n  describe('#build', () => {\n    it('should request a build from a worker', (done) => {\n      workers.spawn(1);\n\n      let opts = {\n        config: path.join(__dirname, 'test_bundles', 'basic_bundle', 'webpack.config.js')\n      };\n\n      workers.build(opts, (err, data) => {\n        assert.isNull(err);\n        assert.isObject(data);\n\n        done();\n      });\n    });\n    it('should produce errors if requests for a dead worker arrive', (done) => {\n      workers.spawn(1);\n\n      let opts = {\n        config: path.join(__dirname, 'test_bundles', 'basic_bundle', 'webpack.config.js')\n      };\n\n      workers.build(opts, (err, data) => {\n        assert.isNull(err);\n        assert.isObject(data);\n\n        workers.workers[0].kill();\n\n        workers.build(opts, (err, data) => {\n          assert.instanceOf(err, Error);\n          assert.isNull(data);\n\n          done();\n        });\n      });\n    });\n  });\n});"]}