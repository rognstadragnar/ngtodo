{"version":3,"sources":["../src/Cache.js"],"names":[],"mappings":"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","file":"Cache.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport mkdirp from 'mkdirp';\nimport Cache from '../../lib/caches/Cache';\nimport options from '../../lib/options';\nimport utils from './utils';\nimport webpackPackageJson from 'webpack/package';\nimport packageJson from '../../package';\n\nlet assert = utils.assert;\nlet TEST_OUTPUT_DIR = utils.TEST_OUTPUT_DIR;\n\n// Ensure we have a clean slate before and after each test\nbeforeEach(() => {\n  utils.cleanTestOutputDir();\n});\nafterEach(() => {\n  utils.cleanTestOutputDir();\n});\n\ndescribe('Cache', () => {\n  it('should be a function', () => {\n    assert.isFunction(Cache);\n  });\n  it('should accept a filename argument', () => {\n    let filename = path.join(TEST_OUTPUT_DIR, 'cache_init_test.json');\n    let cache = new Cache(options({cacheFile: filename}));\n    assert.equal(cache.filename, filename);\n    assert.deepEqual(cache.data, {});\n    cache.set(null);\n    assert.equal(fs.readFileSync(filename).toString(), 'null');\n  });\n  it('should be able to persist an entry to a file', () => {\n    let cache = new Cache(\n      options({cacheFile: path.join(TEST_OUTPUT_DIR, 'cache_persist.json')})\n    );\n    cache.set({foo: {bar: 'woz'}});\n    let json = require(TEST_OUTPUT_DIR + '/cache_persist.json');\n    assert.deepEqual(json, {foo: {bar: 'woz'}});\n  });\n  it('should be able to read an entry from a file', () => {\n    let filename = path.join(TEST_OUTPUT_DIR, 'cache_read.json');\n    let testFile = path.join(TEST_OUTPUT_DIR, 'cache_read_test_file.js');\n    let startTime = +new Date() + 2000;\n\n    mkdirp.sync(path.dirname(filename));\n\n    fs.writeFileSync(filename, JSON.stringify({\n      startTime: startTime,\n      fileDependencies: [filename],\n      stats: {test: 'bar'},\n      config: {\n        file: '/foo/bar'\n      }\n    }));\n\n    fs.writeFileSync(testFile, '{}');\n\n    let cache = new Cache(options({cacheFile: filename}), true);\n\n    assert.equal(cache.filename, filename);\n    assert.isObject(cache.data);\n    assert.equal(cache.data.startTime, startTime);\n    assert.deepEqual(cache.data.fileDependencies, [filename]);\n    assert.deepEqual(cache.data.stats, {test: 'bar'});\n    assert.equal(cache.data.config.file, '/foo/bar');\n  });\n  describe('#get', () => {\n    it('should validate an entry\\'s props', (done) => {\n      let filename = path.join(TEST_OUTPUT_DIR, 'cache_prop_validate.json');\n      let testFile = path.join(TEST_OUTPUT_DIR, 'cache_prop_validate_test_file.js');\n\n      let startTime = +new Date();\n\n      mkdirp.sync(path.dirname(filename));\n\n      fs.writeFileSync(filename, '{}');\n      fs.writeFileSync(testFile, '{}');\n\n      let cache = new Cache(options({cacheFile: filename}));\n\n      cache.get((err, entry) => {\n        assert.isNull(err);\n        assert.isNull(entry);\n\n        cache.data = {\n          startTime: startTime,\n          fileDependencies: [],\n          stats: {},\n          config: {\n            file: testFile\n          },\n          buildHash: 'foo',\n          assets: [],\n          dependencies: {\n            webpack: webpackPackageJson.version,\n            'webpack-build': null\n          }\n        };\n\n        cache.get((err, entry) => {\n          assert.isNull(err);\n          assert.isNull(entry);\n\n          cache.data.dependencies = {\n            webpack: webpackPackageJson.version,\n            'webpack-build': packageJson.version\n          };\n\n          cache.get((err, entry) => {\n            assert.isNull(err);\n            assert.isObject(entry);\n\n            assert.strictEqual(entry, cache.data);\n\n            done();\n          });\n        });\n      });\n    });\n    it('should validate a config file\\'s mtime', (done) => {\n      let filename1 = path.join(TEST_OUTPUT_DIR, 'cache_file_mtime1.json');\n      let filename2 = path.join(TEST_OUTPUT_DIR, 'cache_file_mtime2.json');\n      let testFile = path.join(TEST_OUTPUT_DIR, 'cache_file_mtime_test_file.js');\n\n      mkdirp.sync(path.dirname(filename1));\n\n      fs.writeFileSync(filename1, JSON.stringify({\n        startTime: +new Date() - 1000,\n        fileDependencies: [filename1],\n        dependencies: {},\n        stats: {test: 1},\n        config: {\n          file: testFile\n        },\n        buildHash: 'foo1',\n        assets: []\n      }));\n\n      fs.writeFileSync(filename2, JSON.stringify({\n        startTime: +new Date() + 1000,\n        fileDependencies: [filename2],\n        dependencies: {},\n        stats: {test: 2},\n        config: {\n          file: testFile\n        },\n        buildHash: 'foo2',\n        assets: []\n      }));\n\n      fs.writeFileSync(testFile, '{}');\n\n      let cache1 = new Cache(options({cacheFile: filename1}));\n      let cache2 = new Cache(options({cacheFile: filename2}));\n\n      cache1.get((err, entry) => {\n        assert.instanceOf(err, Error);\n        assert.include(err.message, 'Stale config file');\n        assert.isUndefined(entry);\n\n        cache2.get((err, entry) => {\n          assert.isNull(err);\n          assert.isObject(entry);\n\n          assert.strictEqual(entry, cache2.data);\n          assert.equal(entry.stats.test, 2);\n\n          done();\n        });\n      });\n    });\n  });\n  describe('#set', () => {\n    it('should persist to file', () => {\n      let filename = path.join(TEST_OUTPUT_DIR, 'cache_set.json');\n      mkdirp.sync(path.dirname(filename));\n\n      let cache = new Cache(options({cacheFile: filename}));\n\n      cache.set({foo: {bar: 'woz'}});\n\n      let contents = fs.readFileSync(filename).toString();\n\n      assert.deepEqual(JSON.parse(contents), {foo: {bar: 'woz'}});\n    });\n  })\n});"]}