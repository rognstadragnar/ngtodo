{"version":3,"sources":["../src/Worker.js"],"names":[],"mappings":"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","file":"Worker.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\nimport Worker from '../../lib/workers/Worker';\nimport options from '../../lib/options';\nimport utils from './utils';\n\nlet assert = utils.assert;\n\n// Ensure we have a clean slate before and after each test\nbeforeEach(() => {\n  utils.cleanTestOutputDir();\n});\nafterEach(() => {\n  utils.cleanTestOutputDir();\n});\n\ndescribe('Worker', () => {\n  it('should be a function', () => {\n    assert.isFunction(Worker);\n  });\n  describe('#onReady', () => {\n    it('should accept and call functions when the process is ready', (done) => {\n      let worker = new Worker();\n\n      // Sanity checks\n      assert.isObject(worker.worker);\n      assert.isFunction(worker.worker.send);\n\n      worker.onReady((err) => {\n        assert.isNull(err);\n\n        worker.kill();\n        done();\n      });\n    });\n    it('should produce errors if requests for a dead worker arrive', (done) => {\n      let worker = new Worker();\n\n      worker.onReady((err) => {\n        assert.isNull(err);\n\n        worker.kill();\n\n        setTimeout(() => {\n          worker.onReady((err) => {\n            assert.instanceOf(err, Error);\n            worker.onReady((_err) => {\n              assert.strictEqual(_err, err);\n\n              done();\n            });\n          });\n        }, 50);\n      });\n    });\n  });\n  describe('#getStatus', () => {\n    it('should accept and call functions when the process is ready', (done) => {\n      let worker = new Worker();\n\n      worker.getStatus((err, status) => {\n        assert.isNull(err);\n\n        assert.equal(status, 'ok');\n\n        worker.kill();\n        done();\n      });\n    });\n  });\n  describe('#build', () => {\n    it('should accept an options argument and provide the output from the build', (done) => {\n      let worker = new Worker();\n\n      worker.build({\n        config: path.join(__dirname, 'test_bundles', 'basic_bundle', 'webpack.config.js')\n      }, (err, data) => {\n        assert.isNull(err);\n        assert.isObject(data);\n\n        let existsAt = data.assets[0];\n        assert.isString(existsAt);\n\n        let contents = fs.readFileSync(existsAt).toString();\n        assert.include(contents, '__BASIC_BUNDLE_ENTRY_TEST__');\n        assert.include(contents, '__BASIC_BUNDLE_REQUIRE_TEST__');\n\n        worker.kill();\n        done();\n      });\n    });\n    it('should handle errors', (done) => {\n      let worker = new Worker();\n\n      worker.build({\n        config: path.join('/does/not/exist')\n      }, (err, data) => {\n        assert.isObject(err);\n        assert.isString(err.type);\n        assert.isString(err.message);\n        assert.isString(err.stack);\n        assert.isNull(data);\n\n        worker.kill();\n        done();\n      });\n    });\n  });\n});"]}